#!/usr/bin/perl
use strict;
use warnings;
use 5.010_000;

use Getopt::Long;
use Pod::Usage;

our $VERSION = '0.10';

# default values
my $title     = 'AWStats Totals';
my $html_len  = 20;
my $sort_by   = 'bandwidth';
my $do_html   = 1;
my $xls_file  = '';
my $show_help = 0;

# parse command line options
GetOptions(
    'title=s'   => \$title,
    'length=i'  => \$html_len,
    'sort_by=s' => \$sort_by,
    'html!'     => \$do_html,
    'xls=s'     => \$xls_file,
    'help|?'    => \$show_help,
) or pod2usage(2);

if (@ARGV == 0) {
    $show_help = 1;
    warn "No files given.\n";
}
pod2usage(1) if $show_help;


# global variables
my %handlers = (
    'general' => \&section_general,
    'day'     => \&section_day,
);

my %stats;

# main loop - for each filename 
for my $filename (@ARGV) {

    # get domain name
    my $domain;
    given ($filename) {
        # different DataDir per domain
        when (m{(?<domain>[^/]+)/awstats\d{6}\.txt\z}xms) {
            $domain = $+{domain};
        }
        # different config file name per domain
        when (m{awstats\d{6}\.(?<domain>.+)\.txt\z}xms) {
            $domain = $+{domain};
        }
        default {
            die "unrecognized filename format ($filename)\n";
        }
    }

    open (my $fh, '<', $filename) or die "open($filename): $!";
    parse_logfile($fh, $domain);
    close $fh;
}

if ($do_html) {
    write_html( \%stats, {
            title    => $title,
            sort_by  => $sort_by,
            html_len => $html_len,
    });
}

if ($xls_file) {
    # Check if required module is present
    eval {
        require Spreadsheet::WriteExcel;
    };

    if ($@) {
        warn "Please install Spreadsheet::WriteExcel.\n";
    } else {
        Spreadsheet::WriteExcel->import();
        write_xls(\%stats, {
            filename => $xls_file,
            title    => $title,
            sort_by  => $sort_by,
        });
    }
}

exit;

# returns list od domains sorted in choosen order
sub get_sorted_domains {
    my ($by, $stats_ref) = @_;

    return sort keys %$stats_ref if $by eq 'domain';

    return sort {
        ($stats_ref->{$b}->{$by} || 0)
            <=>
        ($stats_ref->{$a}->{$by} || 0)
    } keys %$stats_ref;
}

sub write_xls {
    my ( $stats_ref, $opts_ref ) = @_;

    my $filename = $opts_ref->{'filename'};
    my $sort_by  = $opts_ref->{'sort_by'};
    my $title    = $opts_ref->{'title'};

    my $workbook = Spreadsheet::WriteExcel->new($filename);
    die "Cannot create ${filename}: $!\n" unless defined $workbook;

    my $worksheet = $workbook->add_worksheet($title);

    my $fmt_header = $workbook->add_format(
        color  => 'gray',
        bold   => 1,
        align  => 'center',
        shrink => 1,
    );

    my @col_names = (
        'Statistics of',
        'Unique visitors',
        'Number of visits',
        'Pages',
        'Hits',
        'Bandwidth (MiB)',
        'Bandwidth (B)',
    );

    $worksheet->set_column(0, 0, 60);
    $worksheet->set_column(1, $#col_names, 20);

    $worksheet->write( 0, 0, \@col_names, $fmt_header );

    my $row = 2; # start at row 2

    for my $domain (
        get_sorted_domains( $sort_by, $stats_ref)
    ) {
        $worksheet->write( $row, 0, $domain);
        $worksheet->write( $row, 1, $stats_ref->{$domain}->{'unique'}    || 0);
        $worksheet->write( $row, 2, $stats_ref->{$domain}->{'visits'}    || 0);
        $worksheet->write( $row, 3, $stats_ref->{$domain}->{'pages'}     || 0);
        $worksheet->write( $row, 4, $stats_ref->{$domain}->{'hits'}      || 0);
        $worksheet->write( $row, 6, $stats_ref->{$domain}->{'bandwidth'} || 0);
        $worksheet->write( $row, 5, '=G'. ($row + 1) .'/(1024 * 1024)');
        $row++;
    }

    $workbook->close();
}

sub write_html {
    my ( $stats_ref, $opts_ref ) = @_;

    my $sort_by  = $opts_ref->{'sort_by'};
    my $title    = $opts_ref->{'title'};

    print <<"EOH";
<!DOCTYPE HTML PUBLIC -//W3C//DTD HTML 4.01 Transitional//EN>
<html>
<head>
<title>$title</title>
<style type="text/css">
body { font: 11px verdana,arial,helvetica,sans-serif; background-color: white }
td   { font: 11px verdana,arial,helvetica,sans-serif; text-align: center; color: black }
td.c { text-align: center; }
td.l { text-align: left; }
td.r { text-align: right; }
</style>
</head>
<body>
<table align="center">
<tr>
<td class="l" bgcolor="#ECECEC">&nbsp;Statistics of</td>
<td class="c" width="80" bgcolor="#FFB055">Unique visitors</td>
<td class="c" width="80" bgcolor="#F8E880">Number of visits</td>
<td class="c" width="80" bgcolor="#4477DD">Pages</td>
<td class="c" width="80" bgcolor="#66F0FF">Hits</td>
<td class="c" width="80" bgcolor="#2EA495">Bandwidth (MiB)</td>
</tr>
EOH

    my $domain_counter = $opts_ref->{'html_len'};

    DOMAIN:
    for my $domain (
        get_sorted_domains( $sort_by, $stats_ref)
    ) {
        last DOMAIN unless $domain_counter--;

        my $unique    = $stats_ref->{$domain}->{'unique'}    || 0;
        my $visits    = $stats_ref->{$domain}->{'visits'}    || 0;
        my $pages     = $stats_ref->{$domain}->{'pages'}     || 0;
        my $hits      = $stats_ref->{$domain}->{'hits'}      || 0;
        my $bandwidth = $stats_ref->{$domain}->{'bandwidth'} || 0;

        my $bw_mib = sprintf "%d", $bandwidth / (1024*1024);
        print <<"EOT"
<tr>
<td class="l">$domain</td>
<td class="r">$unique</td>
<td class="r">$visits</td>
<td class="r">$pages</td>
<td class="r">$hits</td>
<td class="r">$bw_mib</td>
</tr>
EOT
    }
    print <<'EOF';
</table>
</body>
</html>
EOF
}

sub parse_logfile {
    my ($fh, $domain) = @_;
    my $section = 'pre';

    while (my $line = <$fh>) {
        chomp $line;

        if ($line =~ m{\A BEGIN_(\w+)\s}xms) {
            $section = lc($1);
            next;
        }
        if ($line =~ m{\A END_}xms) {
            $section = '';
            next;
        }

        $handlers{$section}->($domain, $line) if exists $handlers{$section};
    }
}

sub section_general {
    my ($domain, $line) = @_;
    
    $stats{$domain}->{'visits'} += $+{'visits'}
        if $line =~ m{\A TotalVisits \s+ (?<visits>\d+)}xms;

    $stats{$domain}->{'unique'} += $+{'unique'}
        if $line =~ m{\A TotalUnique \s+ (?<unique>\d+)}xms;
}

sub section_day {
    my ($domain, $line) = @_;

    return unless $line =~ m{
        \A \d+            \s+
        (?<pages>\d+)     \s+
        (?<hits>\d+)      \s+
        (?<bandwidth>\d+) \s+
    }xms;
    $stats{$domain}->{'pages'}     += $+{'pages'};
    $stats{$domain}->{'hits'}      += $+{'hits'};
    $stats{$domain}->{'bandwidth'} += $+{'bandwidth'};
};
__END__

=head1 NAME

awstats-cd - generate per-domain summary from awstats files

=head1 SYNOPSIS

    awstats-cd [options] [FILE...]

=head1 DESCRIPTION

Awstats-cd make static html pages with some basic statistics about multiple
domains. Optionally it can also create XLS (Excel) files.

=head1 FILE SELECTION

All files should be passed at once on command line. Some examples:

    awstats-cd /var/lib/awstats/awstats012010*.txt >2010_01.html

    find /var/lib/awstats/ -type f -name 'awstats..2010\.txt' -print0 \
        | xargs -r0 awstats-cd >index.html

=head1 OPTIONS

=over 4

=item B<--title>

Change page title. Default is 'AWStats Totals'

=item B<--length=NUMBER>

Show NUMBER of domains on html page (default 20).

=item B<--sort_by=FIELD>

Sort statistics by field. Available: domain, unique, visits, pages, hits and
(default) bandwidth.

=item B<--no-html>

Disable html output.

=item B<--xls=FILENAME>

Write XLS (Excel) file with statistics. Requires Spreadsheet::WriteExcel
installed on system.

=item B<--help>

Show this help message.

=back

=head1 COPYRIGHT & LICENSE

Copyright 2010 Rafa≈Ç Kupka
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut
